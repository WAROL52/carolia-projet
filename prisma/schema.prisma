// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
//   shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
// }

model Account {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name  String
  email String  @unique
  image String?

  token String
  User  User?
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  firstname String
  lastname  String
  password  String
  birthday  DateTime?
  bornAt    String?

  Account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  accountId Int     @unique
}

model Folder {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name           String
  FolderParent   Folder?  @relation(name: "folderChilds", fields: [folderParentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  folderParentId Int?
  FolderChilds   Folder[] @relation("folderChilds")
  Files          File[]
}

model File {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name     String
  type     String
  Folder   Folder @relation(fields: [folderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  folderId Int
}
